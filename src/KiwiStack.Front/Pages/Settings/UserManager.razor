@page "/settings/user-manager"
@inject KiwiStack.Front.Auth.ApiClient Api
@using KiwiStack.Shared.Dtos.User
@using KiwiStack.Shared.Enums

<PageTitle>用户管理</PageTitle>

<MudPaper Class="pa-3" Elevation="0">
    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
        <MudText Typo="Typo.h5">用户管理</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_keyword" Variant="Variant.Outlined" Dense="true" Placeholder="搜索用户..."
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" OnDebouncedValueChanged="_ => LoadAsync()" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCreate">新建</MudButton>
    </MudStack>
</MudPaper>

<div class="mt-3">
    <MudTable Items="_items" Dense="true" Hover="true" Bordered="true" Loading="_loading">
        <HeaderContent>
            <MudTh Style="width: 28px"></MudTh>
            <MudTh>账号</MudTh>
            <MudTh>姓名</MudTh>
            <MudTh>邮箱</MudTh>
            <MudTh>角色</MudTh>
            <MudTh Style="width: 140px">操作</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="" Class="pa-0"><MudIcon Icon="@Icons.Material.Filled.Person" Color="Color.Primary" /></MudTd>
            <MudTd DataLabel="账号">@context.Account</MudTd>
            <MudTd DataLabel="姓名">@context.Name</MudTd>
            <MudTd DataLabel="邮箱">@context.Email</MudTd>
            <MudTd DataLabel="角色">@context.Role</MudTd>
            <MudTd DataLabel="操作">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => OpenEdit(context)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => DeleteAsync(context.Id)" />
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText Typo="Typo.caption" Class="pa-4">暂无数据</MudText>
        </NoRecordsContent>
    </MudTable>
</div>

<MudDialog @bind-IsVisible="_dialogVisible" DisableSidePadding="true">
    <DialogContent>
        <MudStack Spacing="2">
            <MudText Typo="Typo.h6">@(_editingId == Guid.Empty ? "新建用户" : "编辑用户")</MudText>
            <MudTextField @bind-Value="_account" Label="账号" Required="true" Disabled="@(_editingId!=Guid.Empty)" />
            <MudTextField @bind-Value="_name" Label="姓名" Required="true" />
            <MudTextField @bind-Value="_email" Label="邮箱" />
            <MudSelect T="RoleEnum" @bind-Value="_role" Label="角色">
                @foreach (var r in Enum.GetValues<RoleEnum>())
                {
                    <MudSelectItem Value="r">@r</MudSelectItem>
                }
            </MudSelect>
            <MudTextField @bind-Value="_password" Label="密码" InputType="InputType.Password" HelperText="留空则不修改密码" />
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="() => _dialogVisible = false">取消</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveAsync">保存</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string? _keyword;
    private bool _loading;
    private List<UserDto> _items = new();

    private bool _dialogVisible;
    private Guid _editingId;
    private string _account = string.Empty, _name = string.Empty, _email = string.Empty, _password = string.Empty;
    private RoleEnum _role = RoleEnum.User;

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        _loading = true; StateHasChanged();
        var url = $"/api/v1/User/list?Keyword={Uri.EscapeDataString(_keyword ?? string.Empty)}";
        var res = await Api.GetAsync<KiwiStack.Shared.Contracts.KiwiResult<List<UserDto>>>(url);
        _items = res?.Data ?? new();
        _loading = false;
    }

    private void OpenCreate()
    {
        _editingId = Guid.Empty; _account = _name = _email = _password = string.Empty; _role = RoleEnum.User;
        _dialogVisible = true;
    }

    private void OpenEdit(UserDto dto)
    {
        _editingId = dto.Id; _account = dto.Account; _name = dto.Name; _email = dto.Email; _role = dto.Role; _password = string.Empty;
        _dialogVisible = true;
    }

    private async Task SaveAsync()
    {
        if (_editingId == Guid.Empty)
        {
            var body = new UserCreateDto { Account = _account, Name = _name, Email = _email, Password = string.IsNullOrWhiteSpace(_password)? "Pass@123" : _password, Role = _role };
            var resp = await Api.Http.PostAsJsonAsync("/api/v1/User", body);
            if (!resp.IsSuccessStatusCode) return;
        }
        else
        {
            var body = new UserUpdateDto { Id = _editingId, Name = _name, Email = _email, Password = _password, Role = _role };
            var resp = await Api.Http.PutAsJsonAsync("/api/v1/User", body);
            if (!resp.IsSuccessStatusCode) return;
        }
        _dialogVisible = false;
        await LoadAsync();
    }

    private async Task DeleteAsync(Guid id)
    {
        var resp = await Api.Http.DeleteAsync($"/api/v1/User/{id}");
        if (resp.IsSuccessStatusCode) await LoadAsync();
    }
}
