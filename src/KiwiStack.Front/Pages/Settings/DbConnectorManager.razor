@page "/settings/db-connector-manager"
@inject KiwiStack.Front.Auth.ApiClient Api
@using KiwiStack.Shared.Dtos.DatabaseConnection

<PageTitle>数据库连接器</PageTitle>

<MudPaper Class="pa-3" Elevation="0">
    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
        <MudText Typo="Typo.h5">数据库连接器</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_keyword" Variant="Variant.Outlined" Dense="true" Placeholder="搜索连接器..."
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" OnDebouncedValueChanged="_ => LoadAsync()" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenCreate">新建</MudButton>
    </MudStack>
</MudPaper>

<div class="mt-3">
    <MudTable Items="_items" Dense="true" Hover="true" Bordered="true" Loading="_loading">
        <HeaderContent>
            <MudTh Style="width: 28px"></MudTh>
            <MudTh>名称</MudTh>
            <MudTh>类型</MudTh>
            <MudTh>连接</MudTh>
            <MudTh>数据库</MudTh>
            <MudTh>用户</MudTh>
            <MudTh Style="width: 140px">操作</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="" Class="pa-0"><MudIcon Icon="@Icons.Material.Filled.Storage" Color="Color.Primary" /></MudTd>
            <MudTd DataLabel="名称">@context.Name</MudTd>
            <MudTd DataLabel="类型">@context.DbType</MudTd>
            <MudTd DataLabel="连接">@context.Host:@context.Port</MudTd>
            <MudTd DataLabel="数据库">@context.Database</MudTd>
            <MudTd DataLabel="用户">@context.Username</MudTd>
            <MudTd DataLabel="操作">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => OpenEdit(context)" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" Color="Color.Error" OnClick="() => DeleteAsync(context.Id)" />
            </MudTd>
        </RowTemplate>
        <NoRecordsContent>
            <MudText Typo="Typo.caption" Class="pa-4">暂无数据</MudText>
        </NoRecordsContent>
    </MudTable>
</div>

<MudDialog @bind-IsVisible="_dialogVisible" DisableSidePadding="true">
    <DialogContent>
        <MudStack Spacing="2">
            <MudText Typo="Typo.h6">@(_editing?.Id == Guid.Empty ? "新建连接器" : "编辑连接器")</MudText>
            <MudTextField @bind-Value="_editing!.Name" Label="名称" Required="true" />
            <MudSelect T="KiwiStack.Shared.DbTypeEnum" @bind-Value="_editing!.DbType" Label="类型">
                @foreach (var t in Enum.GetValues<KiwiStack.Shared.DbTypeEnum>())
                {
                    <MudSelectItem Value="t">@t</MudSelectItem>
                }
            </MudSelect>
            <MudTextField @bind-Value="_editing!.Host" Label="主机" />
            <MudNumericField T="int?" @bind-Value="_editing!.Port" Label="端口" />
            <MudTextField @bind-Value="_editing!.Username" Label="用户名" />
            <MudTextField @bind-Value="_editing!.Password" Label="密码" InputType="InputType.Password" />
            <MudTextField @bind-Value="_editing!.Database" Label="数据库" />
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text" OnClick="() => _dialogVisible = false">取消</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveAsync">保存</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string? _keyword;
    private bool _loading;
    private List<DatabaseConnectionDto> _items = new();

    private bool _dialogVisible;
    private DatabaseConnectionCreateOrUpdateDto? _editing;

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        _loading = true; StateHasChanged();
        var url = $"/api/v1/DatabaseConnection/list?Keyword={Uri.EscapeDataString(_keyword ?? string.Empty)}";
        var res = await Api.GetAsync<KiwiStack.Shared.Contracts.KiwiResult<List<DatabaseConnectionDto>>>(url);
        _items = res?.Data ?? new();
        _loading = false;
    }

    private void OpenCreate()
    {
        _editing = new DatabaseConnectionCreateOrUpdateDto();
        _dialogVisible = true;
    }

    private void OpenEdit(DatabaseConnectionDto dto)
    {
        _editing = new DatabaseConnectionCreateOrUpdateDto
        {
            Id = dto.Id,
            Name = dto.Name,
            DbType = dto.DbType,
            Host = dto.Host,
            Port = dto.Port,
            Username = dto.Username,
            Database = dto.Database,
            ProjectId = dto.ProjectId
        };
        _dialogVisible = true;
    }

    private async Task SaveAsync()
    {
        if (_editing is null) return;
        if (_editing.Id == Guid.Empty)
        {
            var resp = await Api.Http.PostAsJsonAsync("/api/v1/DatabaseConnection", _editing);
            if (!resp.IsSuccessStatusCode) return;
        }
        else
        {
            var resp = await Api.Http.PutAsJsonAsync("/api/v1/DatabaseConnection", _editing);
            if (!resp.IsSuccessStatusCode) return;
        }
        _dialogVisible = false;
        await LoadAsync();
    }

    private async Task DeleteAsync(Guid id)
    {
        var resp = await Api.Http.DeleteAsync($"/api/v1/DatabaseConnection/{id}");
        if (resp.IsSuccessStatusCode)
            await LoadAsync();
    }
}
